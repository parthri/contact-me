OS 


Practical 5

Aim: Write a C program to implement bankerâ€™s algorithm for deadlock Avoidance.


Code:

#include <stdio.h>
int current_alloc[5][5], maximum_need[5][5], available[5], need[5][5];
int allocation[5]={0, 0, 0, 0, 0};
int maxres[5], running[5], safe=0;
int counter=0,i,j, exec, resources, processes, k=1;
int main(){
printf("\nEnter number of processes:");
scanf("%d",&processes);
for(i=0;i<processes;i++){
running[i]=1;
counter++;
}
printf("\nEnter number of resources:");
scanf("%d",&resources);
printf("\nEnter total instances:");
for(i=0;i<resources;i++){
scanf("%d",&maxres[i]);
}
printf("\nEnter Allocated Resource Table:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
scanf("%d",&current_alloc[i][j]);
}
}
printf("\nEnter Maximum need matrix:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
scanf("%d",&maximum_need[i][j]);
}
}
printf("\nThe total instances are:");
for(i=0;i<resources;i++){
printf("\t%d",maxres[i]);
}
printf("\nThe Allocated Resource Table:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
printf("\t%d",current_alloc[i][j]);
}
printf("\n");
}
printf("\nThe Maximum need Table:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
printf("\t%d",maximum_need[i][j]);
}
printf("\n");
}
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
allocation[j]+=current_alloc[i][j];
}
}
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
need[i][j]=maximum_need[i][j]-current_alloc[i][j];
}
}
printf("\nAllocated resources:");
for(i=0;i<resources;i++)
{
printf("\t%d",allocation[i]);
}
for(i=0;i<resources;i++){
available[i]=maxres[i]-allocation[i];
}
printf("\nAvailable resources:");
for(i=0;i<resources;i++){
printf("\t%d",available[i]);
}
printf("\n");
printf("\nNeed matrix:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
printf("\t%d",need[i][j]);
}
printf("\n");
}
while(counter!=0){
safe=0;
for(i=0;i<processes;i++){
if(running[i]==1){
exec=1;
for(j=0;j<resources;j++){
if(need[i][j]>available[j]){
exec=0;
break;
}
}
if(exec==1){
printf("\nProcesses%d is executing\n",i);
running[i]=0;
counter--;
safe=1;
for(j=0;j<resources;j++){
available[j]+=current_alloc[i][j];
}
break;
}
}
}
if(safe==0){
printf("\nThe processes is in Unsafe state:\n");
break;
}
else{
printf("\nThe processesis in safe state:\n");
for(i=0;i<resources;i++){
printf("\n%d\t\t",available[i]);
}
}
}
return 0;
}





Practical 6

Aim: Write a C program to open, read and write into a file.


Code:

#include <stdio.h>
void main()
{
int p[10],np,b[10],nd,ch,c[10],d[10],alloc[10],flag[10],temp,i,j;
printf("\nEnter the no of process:");
scanf("%d",&np);
printf("\nEnter the no of blocks:");
scanf("%d",&np);
printf("\nEnter the size of each process:");
for(i=0;i<np;i++){
printf("\nProcess %d:",i);
scanf("%d",&p[i]);
}
printf("\nEnter the block sizes:");
for(j=0;j<np;j++){
printf("\nBlock%d:",j);
scanf("%d",&b[j]);
c[j]=b[j];
d[j]=b[j];
}
if(np<=np){
printf("\n1.firt fit 2.Best fit 3.Worst fit");
Practical 6
Aim: Write a C program to open, read and write into a file.
Code:
#include <stdio.h>
void main()
{
int p[10],np,b[10],nd,ch,c[10],d[10],alloc[10],flag[10],temp,i,j;
printf("\nEnter the no of process:");
scanf("%d",&np);
printf("\nEnter the no of blocks:");
scanf("%d",&np);
printf("\nEnter the size of each process:");
for(i=0;i<np;i++){
printf("\nProcess %d:",i);
scanf("%d",&p[i]);
}
printf("\nEnter the block sizes:");
for(j=0;j<np;j++){
printf("\nBlock%d:",j);
scanf("%d",&b[j]);
c[j]=b[j];
d[j]=b[j];
}
if(np<=np){
printf("\n1.firt fit 2.Best fit 3.Worst fit");
do{
printf("\nEnter your choice:");
scanf("%d",&ch);
switch(ch){
case1:
printf("\nFirst fit\n");
for(i=0;i<np;i++){
for(j=0;j<np;j++){
if(p[i]<=b[j]){
alloc[j]=p[i];
printf("\nalloc[%d",alloc[j]);
printf("\nProcess%dpf size %d is allocated in block %d of size %d",i,p[i],j,b[j]);
flag[i]=0;
b[j]=0;
break;
}else{
flag[i]=1;
}
}
for(i=0;i<np;i++){
if(flag[i]!=0){
printf("\nProcess %d of size %d is not allocated",i,p[i]);
}
}
break;
case 2:
printf("\nBest Fit\n");
for(j=0;j<np;j++){
if(c[i]>c[j]){
temp=c[i];
c[i]=c[j];
c[j]=temp;
}
}
}
printf("\nAfter sorting block size:");
for(i=0;i<np;i++){
printf("\nBlock number. %d:%d",i,c[i]);
}
for(i=0;i<np;i++){
for(j=0;j<np;j++){
if(p[i]<=c[j]){
alloc[j]=p[i];
printf("\nalloc[%d]",alloc[j]);
printf("\nProcess %d pf size %d is allocated in block %d of size %d",i,p[i],j,c[j]);
flag[i]=0;
c[j]=0;
break;
}else{
flag[i]=1;
}
}
}
for(i=0;i<np;i++){
if(flag[i]!=0){
printf("\nProcess %d of size %d is not allocated",i,p[i]);
}
}
break;
case 3:
printf("\nWorst Fit\n");
for(i=0;i<np;i++){
for(j=i+1;j<np;j++){
if(d[i]<d[j]){
temp=d[i];
d[i]=d[j];
d[j]=temp;
}
}
}
printf("\nAfter sorting block size:");
for(i=0;i<np;i++){
printf("\nBlock number.%d:%d",i,d[i]);
}
for(i=0;i<np;i++){
for(j=0;j<np;j++){
if(p[i]<=d[j]){
alloc[j]=p[i];
printf("\nalloc[%d]",alloc[j]);
printf("\nProcess %d pf size %d is allocated in block int of size int",i,p[i,j,d[j]]);
flag[i]=0;
d[j]=0;
break;
}else{
flag[i]=1;
}
}
}
for(i=0;i<np;i++){
if(flag[i]!=0){
printf("\nProcess %d of size %d is not allocated",i,p[i]);
}
}
break;
default:
printf("Invalid choice...!");
break;
}
}
while(ch<=3);
}
}




Practical 7

Aim: Write a C program to implement First In First Out page replacement algorithm.

Code:

#include<stdio.h>
void main(){
int ref_str[25], frame[5], n, nf, i, j, k, available, fcount=0;
printf("Enter the number of pages: \n");
scanf("%d",&n);
printf("Enter the referances string: \n");
for(i=0;i<n;i++){
scanf("%d",&ref_str[i]);
}
printf("\nEnter the number of frames: \n");
scanf("%d",&nf);
for(i=0;i<nf;i++){
frame[i]=-1;
}
j=0;
printf("\nPage Request\tFrame 1\tFrame2\tFrame3\tFPage Fault\n");
for(i=0;i<n;i++){
printf("%d\t\t",ref_str[i]);
available=0;
for(k=0;k<nf;k++){
if(frame[k]==ref_str[i]){
available=1;
for(k=0;k<nf;k++){
printf("%d\t",frame[k]);
}
}
}
if(available==0){
frame[j]=ref_str[i];
j=(j+1)%nf;
fcount++;
for(k=0;k<nf;k++){
printf("%d\t\t",frame[k]);
}
printf("\tF");
}
printf("\n");
}
printf("\nNumber of page fault are:%d",fcount);
}





Practical 8


Aim: Write a C program to open, read and write into a file.


Code:


#include<stdio.h>
void main()
{
char ch;
FILE*fp=fopen("ce7.txt","w");
fprintf(fp."This is my first text file.");
fclose(fp);
fp=fopen("ce7.txt","r");
while(ch!=EOF){
printf("%c",ch);
ch=fgetc(fp);
}
fclose(fp);
}
