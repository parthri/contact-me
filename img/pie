OS 


Practical 5


Aim: Write a C program to implement bankerâ€™s algorithm for deadlock Avoidance.


Code:

#include <stdio.h>
int current_alloc[5][5], maximum_need[5][5], available[5], need[5][5];
int allocation[5]={0, 0, 0, 0, 0};
int maxres[5], running[5], safe=0;
int counter=0,i,j, exec, resources, processes, k=1;
int main(){
printf("\nEnter number of processes:");
scanf("%d",&processes);
for(i=0;i<processes;i++){
running[i]=1;
counter++;
}
printf("\nEnter number of resources:");
scanf("%d",&resources);
printf("\nEnter total instances:");
for(i=0;i<resources;i++){
scanf("%d",&maxres[i]);
}
printf("\nEnter Allocated Resource Table:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
scanf("%d",&current_alloc[i][j]);
}
}
printf("\nEnter Maximum need matrix:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
scanf("%d",&maximum_need[i][j]);
}
}
printf("\nThe total instances are:");
for(i=0;i<resources;i++){
printf("\t%d",maxres[i]);
}
printf("\nThe Allocated Resource Table:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
printf("\t%d",current_alloc[i][j]);
}
printf("\n");
}
printf("\nThe Maximum need Table:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
printf("\t%d",maximum_need[i][j]);
}
printf("\n");
}
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
allocation[j]+=current_alloc[i][j];
}
}
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
need[i][j]=maximum_need[i][j]-current_alloc[i][j];
}
}
printf("\nAllocated resources:");
for(i=0;i<resources;i++)
{
printf("\t%d",allocation[i]);
}
for(i=0;i<resources;i++){
available[i]=maxres[i]-allocation[i];
}
printf("\nAvailable resources:");
for(i=0;i<resources;i++){
printf("\t%d",available[i]);
}
printf("\n");
printf("\nNeed matrix:\n");
for(i=0;i<processes;i++){
for(j=0;j<resources;j++){
printf("\t%d",need[i][j]);
}
printf("\n");
}
while(counter!=0){
safe=0;
for(i=0;i<processes;i++){
if(running[i]==1){
exec=1;
for(j=0;j<resources;j++){
if(need[i][j]>available[j]){
exec=0;
break;
}
}
if(exec==1){
printf("\nProcesses%d is executing\n",i);
running[i]=0;
counter--;
safe=1;
for(j=0;j<resources;j++){
available[j]+=current_alloc[i][j];
}
break;
}
}
}
if(safe==0){
printf("\nThe processes is in Unsafe state:\n");
break;
}
else{
printf("\nThe processesis in safe state:\n");
for(i=0;i<resources;i++){
printf("\n%d\t\t",available[i]);
}
}
}
return 0;
}
